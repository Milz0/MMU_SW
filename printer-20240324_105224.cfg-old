[include mainsail.cfg]
[include stealthburner_led_effects_barf.cfg]
[include KAMP_Settings.cfg]
[exclude_object]
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_1B0036000250415339373620-if00

[mcu EBBCan]
canbus_uuid: 9eba622befda

[idle_timeout]
#gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 3600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

[gcode_macro M600]
gcode:
    PAUSE

[printer]
kinematics: corexz
max_velocity: 200
max_accel: 3000
max_z_velocity: 50
max_z_accel: 1000
square_corner_velocity: 4.0

[temperature_sensor Toolhead]
sensor_type: Generic 3950
sensor_pin: EBBCan: PA2

[temperature_sensor Raspberry_Pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor Controller]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: z,-y,x

[resonance_tester]
probe_points: 100, 100, 20
accel_chip: adxl345

[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 32
gear_ratio: 50:10
rotation_distance: 22.225372078
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: EBBCan: PA3
max_extrude_cross_section: 5
max_extrude_only_distance: 101
min_temp: 0
max_temp: 260

# sensor_type:MAX31865
# sensor_pin: EBBCan: PA4
# spi_bus: spi1
# rtd_nominal_r: 100
# rtd_reference_r: 430
# rtd_num_of_wires: 2

[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.650
stealthchop_threshold: 0

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
rotation_distance: 40
full_steps_per_rotation: 200
microsteps: 32
endstop_pin: EBBCan: PB8
position_endstop: 250
position_min: 0
position_max: 250
homing_speed: 40
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.5
interpolate: False
stealthchop_threshold: 0

[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB11
rotation_distance: 40
full_steps_per_rotation: 200
microsteps: 32
endstop_pin: tmc2209_stepper_y:virtual_endstop
homing_retract_dist: 0 # Uncomment this line too
position_endstop: 250
position_min: 0
position_max: 250
homing_speed: 40
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.5
interpolate: False
stealthchop_threshold: 0
diag_pin: ^PC1
driver_SGTHRS: 100 # tune this once it's working.

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
rotation_distance: 40
full_steps_per_rotation: 200
microsteps: 32
endstop_pin: probe:z_virtual_endstop
position_max: 250
homing_speed: 20
position_min: -3.0

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.7
interpolate: False
stealthchop_threshold: 999999
[heater_bed]
heater_pin: PC9
##  Validate the following thermistor type to make sure it is correct
##  See https://www.klipper3d.org/Config_Reference.html#common-thermistors for additional options
sensor_type: Generic 3950
sensor_pin: PC4
min_temp: 0
max_temp: 130

[fan]
pin: EBBCan: PA1

[heater_fan hotend_fan]
pin: EBBCan: PA0
heater: extruder
heater_temp: 50.0

#[heater_fan 4W_FAN0]
#pin: EBBCan: PB14
#tachometer_pin: EBBCan: PB15
#tachometer_ppr: 1

#[neopixel hotend_rgb]
#pin: EBBCan:PD3

#[bltouch]
#sensor_pin: ^EBBCan: PB8
#control_pin: EBBCan: PB9

## NPN and PNP proximity switch types can be set by jumper
[probe]
pin: ^EBBCan: PC13
x_offset: 0
y_offset: 25
#z_offset: 0
#samples: 3
#samples_result: median
#sample_retract_dist: 3
#samples_tolerance: 0.006
#samples_tolerance_retries: 3

#[output_pin PB5]
#pin: EBBCan: PB5

#[output_pin PB7]
#pin: EBBCan: PB7

#[output_pin PB6]
#pin: EBBCan: PB6

[homing_override]
axes: z
set_position_z: 0
gcode:
    STATUS_HOMING
    G90
    G0 Z5 F500
    G28 X0 Y0
    G0 X125 Y100 F9000
    G28 Z0
    G0 Z5 F500
    STATUS_READY

[bed_mesh]
speed: 150
horizontal_move_z: 5
mesh_min: 25,35.0
#mesh_min: 45.0,52.0
mesh_max: 225.0,220
#mesh_max: 205.0,200.0
probe_count: 6,6
#probe_count: 4,4
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

[screws_tilt_adjust]
# SW Nylock Mod: Screw 1 uses the 6mm metallic spacer so its
# height is considered the baseline. For tilt adjust using the
# command SCREWS_TILT_CALCULATE, this has to be your Screw 1:
#
#         ******************
#         * S7    S8    S9 *
#         *                * 
#   Bed:  * S5    S1    S6 *  
#         *                *
#         * S2    S3    S4 *
#         ******************
#
screw1: 128,110
screw1_name: center
screw2: 18,5
screw2_name: front_left
screw3: 128,5
screw3_name: front_center
screw4: 233,5
screw4_name: front_right
screw5: 18,110
screw5_name: middle_left
screw6: 233,110
screw6_name: middle_right
screw7: 18,215
screw7_name: rear_left
screw8: 128,215
screw8_name: rear_center
screw9: 233,215
screw9_name: rear_right
horizontal_move_z: 10
speed: 50
screw_thread: CCW-M3

[gcode_macro START_PRINT]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  STATUS_HOMING
  # Homes the printer and sets absolute positioning
  G28                   # Full home (XYZ)
  G90                   # Absolut position
  STATUS_HEATING

    M106 S255                                         # Turns on the PT-fan
    M190 S{target_bed}                                # Sets target temp for the bed

  # Heats up the nozzle up to target via slicer
  M107   # Turns off the PT-fan
  Smart_Park
  M109 S{target_extruder}                           # Heats the nozzle to your print temp
    BED_MESH_CLEAR
    STATUS_MESHING
    BED_MESH_CALIBRATE
    STATUS_PRINTING
    LINE_PURGE

[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script
gcode:
    STATUS_BUSY
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    STATUS_PART_READY

[filament_switch_sensor entry_sensor]
switch_pin: EBBCan: PB6
pause_on_runout: True

[filament_switch_sensor toolhead_sensor]
switch_pin: EBBCan: PB5
pause_on_runout: True

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 39.363
#*# pid_ki = 3.499
#*# pid_kd = 110.705
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 54.116
#*# pid_ki = 0.918
#*# pid_kd = 797.539
#*#
#*# [probe]
#*# z_offset = 0.970
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.112500, 0.115625, 0.103125, 0.040625, 0.084375, 0.031250
#*# 	  0.118750, 0.103125, 0.053125, 0.040625, 0.071875, 0.025000
#*# 	  0.131250, 0.084375, 0.003125, 0.009375, 0.071875, 0.050000
#*# 	  0.006250, 0.078125, -0.003125, -0.003125, 0.034375, -0.075000
#*# 	  0.056250, 0.071875, -0.021875, -0.040625, 0.028125, 0.018750
#*# 	  0.031250, 0.078125, 0.065625, 0.053125, 0.059375, -0.006250
#*# x_count = 6
#*# y_count = 6
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 35.2
#*# max_x = 214.8
#*# min_y = 35.2
#*# max_y = 214.8
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 54.6
#*# shaper_type_y = mzv
#*# shaper_freq_y = 35.2
